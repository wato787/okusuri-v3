# お薬管理アプリ - Cursor バックグラウンドエージェント設定

## プロジェクト概要
このプロジェクトは、お薬管理アプリのモノレポです。TypeScript、React、Hono、Bunを使用したモダンなWebアプリケーションです。

## 技術スタック
- **バックエンド**: Hono + Cloudflare Workers + Drizzle ORM + Zod
- **フロントエンド**: React 19 + Vite + Tailwind CSS + Radix UI + Framer Motion
- **共通**: TypeScript + Bun + Biome
- **アーキテクチャ**: モノレポ構成

## コーディング規約

### 基本原則
- **可読性**: コードは書くよりも読まれる時間の方が長い
- **保守性**: 将来の変更に耐えられる設計
- **一貫性**: プロジェクト全体で統一されたスタイル
- **シンプルさ**: 複雑さを避け、シンプルな解決策を選ぶ

### TypeScript 規約
- **命名規則**:
  - 変数・関数: camelCase
  - 定数: UPPER_SNAKE_CASE
  - クラス・インターフェース: PascalCase
  - 型エイリアス: PascalCase
  - 列挙型: PascalCase
- **インポート順序**: Node.js → 外部ライブラリ → 内部モジュール（絶対パス）→ 相対パス
- **型定義**: インターフェースはオブジェクトの形状、型エイリアスは複雑な型の組み合わせ

### React 規約
- **コンポーネント**: 関数コンポーネント（推奨）
- **Props**: インターフェースで型定義
- **フック**: カスタムフックでロジックを分離
- **ファイル命名**: PascalCase（コンポーネント）、camelCase（ユーティリティ）

### ファイル・ディレクトリ構造
```
src/
├── components/          # 再利用可能なコンポーネント
│   ├── ui/             # 基本UIコンポーネント
│   ├── forms/          # フォームコンポーネント
│   └── layout/         # レイアウトコンポーネント
├── features/           # 機能別モジュール
│   ├── medication/     # 薬の管理機能
│   └── user/          # ユーザー管理機能
├── lib/               # ライブラリ・ユーティリティ
├── hooks/             # カスタムフック
├── types/             # 型定義
└── utils/             # アプリケーション固有のユーティリティ
```

## 開発ガイドライン

### バックエンド開発
- **フレームワーク**: Honoを使用
- **データベース**: Drizzle ORMでクエリを記述
- **バリデーション**: Zodスキーマで入力値検証
- **エラーハンドリング**: 統一されたエラーレスポンス形式
- **API設計**: RESTful APIの原則に従う

### フロントエンド開発
- **コンポーネント**: 再利用可能で単一責任の原則
- **状態管理**: useState/useEffect、必要に応じてContext API
- **スタイリング**: Tailwind CSS + Radix UI
- **アニメーション**: Framer Motion
- **レスポンシブ**: モバイルファーストデザイン

### テスト
- **フレームワーク**: Bun Test
- **テストファイル**: `*.test.ts` または `*.test.tsx`
- **テストデータ**: フィクスチャファイルで管理
- **カバレッジ**: 可能な限り高いカバレッジを目指す

## 品質管理

### リント・フォーマット
- **ツール**: Biome
- **設定**: プロジェクトのbiome.jsonに従う
- **自動修正**: 可能な限り自動修正を使用

### 型チェック
- **ツール**: TypeScript
- **設定**: strict mode有効
- **パス**: 絶対パス（@/*）を使用

### コードレビュー
- **機能面**: 要件満足、エラーハンドリング、エッジケース
- **コード品質**: 命名、関数サイズ、重複排除、コメント
- **テスト**: テストカバレッジ、テストケースの十分性

## セキュリティ
- **入力値検証**: Zodスキーマで厳密にバリデーション
- **SQL インジェクション**: Drizzle ORMで対策
- **CORS**: 適切なCORS設定
- **認証**: 将来的にJWTベースの認証を実装予定

## パフォーマンス
- **フロントエンド**: Viteによる高速ビルド、コード分割
- **バックエンド**: Cloudflare Workersによるエッジコンピューティング
- **データベース**: クエリ最適化、インデックス活用

## モノレポ管理
- **パッケージマネージャー**: Bun
- **ワークスペース**: backend, frontend, shared
- **依存関係**: 共有ライブラリは@okusuri/sharedを使用
- **ビルド**: 各パッケージ独立してビルド可能

## ドキュメント
- **JSDoc**: 関数・クラスに適切なコメント
- **README**: 各パッケージにREADME.md
- **API仕様**: docs/api.mdで管理
- **アーキテクチャ**: docs/architecture.mdで管理

## 禁止事項
- ハードコードされたAPIキーやシークレット
- 型安全性を無視したany型の使用
- テストなしの新機能実装
- ドキュメントなしの複雑なロジック
- 一つの関数・コンポーネントでの複数責任

## 推奨事項
- 型安全性を最優先
- エラーハンドリングの徹底
- テストファースト開発
- ドキュメントの充実
- コードレビューの徹底
- 継続的なリファクタリング

## 注意事項
- 日本語コメント・ドキュメントを基本とする
- 医療アプリケーションの特性を考慮した慎重な開発
- ユーザビリティとアクセシビリティを重視
- データの整合性とセキュリティを最優先