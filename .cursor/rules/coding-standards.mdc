---
description: コーディング規約とベストプラクティス
alwaysApply: true
---

# コーディング規約

お薬管理アプリのコーディング規約とベストプラクティスに従ってください。

## 📋 基本原則

### コード品質の原則
1. **可読性**: コードは書くよりも読まれる時間の方が長い
2. **保守性**: 将来の変更に耐えられる設計
3. **一貫性**: プロジェクト全体で統一されたスタイル
4. **シンプルさ**: 複雑さを避け、シンプルな解決策を選ぶ

### 設計原則
- **DRY (Don't Repeat Yourself)**: 重複を避ける
- **KISS (Keep It Simple, Stupid)**: シンプルに保つ
- **YAGNI (You Aren't Gonna Need It)**: 必要になるまで実装しない
- **SOLID原則**: オブジェクト指向設計の原則に従う

## 🎨 TypeScript 規約

### 命名規則
- **変数・関数**: camelCase (`userName`, `getUserById`)
- **定数**: UPPER_SNAKE_CASE (`API_BASE_URL`, `MAX_RETRY_COUNT`)
- **クラス**: PascalCase (`MedicationRepository`)
- **インターフェース**: PascalCase (Iプレフィックスなし) (`Medication`)
- **型エイリアス**: PascalCase (`MedicationStatus`)
- **列挙型**: PascalCase (`UserRole`)

### インポート順序
1. Node.js ビルトインモジュール
2. 外部ライブラリ
3. 内部モジュール（絶対パス）
4. 相対パス

### 型定義
- インターフェースはオブジェクトの形状を定義
- 型エイリアスは複雑な型の組み合わせ
- ジェネリクスを適切に使用

## ⚛️ React 規約

### コンポーネント定義
- 関数コンポーネントを使用（推奨）
- Propsの型定義を必須とする
- forwardRefを使用してrefを適切に処理
- デフォルト値を適切に設定

### フックの使用
- カスタムフックでロジックを分離
- useEffectの依存配列を適切に設定
- 状態の更新は関数型更新を使用

### ファイル・ディレクトリ命名
- **コンポーネント**: PascalCase (`Button.tsx`, `MedicationCard.tsx`)
- **ユーティリティ**: camelCase (`formatDate.ts`, `apiClient.ts`)
- **型定義**: camelCase (`types.ts`, `apiTypes.ts`)
- **テスト**: camelCase.test.ts (`button.test.tsx`, `utils.test.ts`)
- **ディレクトリ**: kebab-case または camelCase

## 🏗️ アーキテクチャ規約

### ディレクトリ構造
```
src/
├── components/          # 再利用可能なコンポーネント
│   ├── ui/             # 基本UIコンポーネント
│   ├── forms/          # フォームコンポーネント
│   └── layout/         # レイアウトコンポーネント
├── features/           # 機能別モジュール
│   ├── medication/     # 薬の管理機能
│   └── user/          # ユーザー管理機能
├── lib/               # ライブラリ・ユーティリティ
├── hooks/             # カスタムフック
├── types/             # 型定義
└── utils/             # アプリケーション固有のユーティリティ
```

### モジュール設計
- **単一責任の原則**: 各クラス・関数は一つの責任を持つ
- **依存性注入**: インターフェースを通じて依存関係を管理
- **インターフェース分離**: 必要な機能のみを公開

## 📝 コメント・ドキュメント

### JSDoc コメント
- 関数・クラスにはJSDocコメントを記述
- パラメータ、戻り値、例外を明記
- 使用例を含める

### README コメント
- モジュールの目的と責任を説明
- 使用方法と注意事項を記載

## 🧪 テスト規約

### テストファイルの構造
- AAAパターン（Arrange, Act, Assert）で記述
- describeでテストをグループ化
- beforeEach/afterEachでセットアップ・クリーンアップ
- 説明的なテスト名を使用

### テストデータの管理
- テストデータは関数化して再利用
- オーバーライド可能な形式で作成
- モックは適切に管理

## 🔧 ツール設定

### Biome 設定
- リントとフォーマットを有効化
- 推奨ルールを適用
- インデント: スペース2文字
- 行幅: 100文字

### TypeScript 設定
- strictモードを有効化
- 未使用変数・パラメータのチェック
- パスエイリアス（@/*）を使用

## 📋 コードレビュー

### レビューチェックリスト
#### 機能面
- [ ] 要件を満たしているか
- [ ] エラーハンドリングが適切か
- [ ] エッジケースを考慮しているか
- [ ] パフォーマンスに問題がないか

#### コード品質
- [ ] 命名が適切か
- [ ] 関数・クラスが適切なサイズか
- [ ] 重複コードがないか
- [ ] コメントが適切か

#### テスト
- [ ] テストが書かれているか
- [ ] テストケースが十分か
- [ ] テストが独立しているか

## 🔗 関連ドキュメント

詳細な規約については `docs/coding-standards.md` を参照してください。
